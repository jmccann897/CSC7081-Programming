package lecture30_18Apr2023;

public class lecture30 {

	/**
	 * Writing tests
	 * - write to meet specification even if fails
	 * - initialise test data before object to test
	 * - set to mid on first test then valid low to check it actually changes
	 * - if you create default constructor - must test it i.e. assertNotEmpty?
	 * - for constructor w/args, test one valid values and they are set correctly,
	 * can test other valid in GetSet tests
	 * 
	 * Top Trumps
	 * - declaring constants not advised for top trumps challenge
	 * as setter validation required
	 * 
	 * - display vs return
	 * single responsibility - separate out to one or more methods is preferable
	 * i.e separate search and print methods with parameters 
	 * 
	 * File Reading
	 * - Encourages ability to write read method from scratch
	 * - Try with resources = advanced topic and not everyone will use them
	 * - We are working with CSVs as we know how they work
	 * 
	 * Separate methods
	 * - When methods start to become too messy, can try using eclipse 
	 * inbuilt method extract under re-factor
	 * 
	 * Queues
	 * - peek and poll are two main methods
	 * - peek used to check value/object attributes before removing
	 * 
	 * TopTrump continued
	 * - getMaxStatID using power of Collections**
	 * use:
	 * List<> ListName = Arrays.asList (new Integer[]{})
	 * int maxVal = collections.max()
	 * ListName.indexOf(maxVal); 
	 *  
	 * Maps
	 * - Arsenal is good challenge for maps
	 * - Recursion --> can be done iteratively
	 * - String builder is more efficient than string concatenation 
	 * good to be aware
	 * 
	 * Threads
	 * - may be requested through stretch challenges
	 * - single thread requirement 
	 * - synchronised blocks or methods not being assessed
	 * 
	 * Rewatch lect 24 part 3 - need equals to and 
	 * hashcode autogenerated code for no duplicates
	 * 
	 */
	
	
	
}
